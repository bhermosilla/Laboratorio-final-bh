name: workflows

on:
  push:
    branches:
      - feat-lab-final

jobs:        
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
        
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Remove yarn.lock para evitar conflictos
        run: rm -f yarn.lock

      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        run: |
          set +e
          curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' \
            -d 'name=${{ github.event.repository.name }}' \
            -d 'project=${{ github.event.repository.name }}' \
            -d 'organization=curso-devsecops-pipeline' \
            -d 'visibility=public'
          if [ $? -ne 0 ]; then
            echo "Proyecto ya existe en Sonarcloud"
            echo "proyectoExiste=1" >> $GITHUB_ENV
          else
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en Sonarcloud"
            
            echo "Se establece rama main como rama por defecto"
            curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' \
              -d 'name=feat-laboratorio' \
              -d 'project=${{ github.event.repository.name }}'
          fi
          set -e

      - name: Install SonarCloud Scanner locally
        run: npm install sonar-scanner --save-dev

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./node_modules/.bin/sonar-scanner \
          -Dsonar.projectKey=${{ github.event.repository.name }} \
          -Dsonar.organization=curso-devsecops-pipeline \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.branch.name=feat-laboratorio

  #--------------------- SCA -------------------------------------------

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: npm 

    - name: Remove yarn.lock para evitar conflictos
      run: rm -f yarn.lock

    - name: Install OWASP Dependency-Check
      run: |
        curl -LJO https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.0/dependency-check-8.2.0-release.zip
        unzip dependency-check-8.2.0-release.zip -d dependency-check 

    - name: Debug - List files in dependency-check directory
      run: ls -la dependency-check

    - name: Run OWASP Dependency-Check
      run: |
        ./dependency-check/dependency-check/bin/dependency-check.sh --scan . --project "${{ github.repository }}" --out "${{ github.workspace }}/reports" \
        --disableAssembly --disablePyDist --disableNodeAudit --disableCentral --disableNuspec 

    - name: Debug - List files in reports directory
      run: ls -la ${{ github.workspace }}/reports

    - name: Upload Dependency-Check report
      uses: actions/upload-artifact@v2
      with:
        name: Depcheck report
        path: ${{ github.workspace }}/reports

#---------------------Docker Build Image------------------------------------------------------------------------------------
  DockerBuild:
    runs-on: self-hosted
    steps:   
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16' # cambiar la versi√≥n de Node
        cache: 'npm' 

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker
      run: | 
        docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_V3_API_KEY }} --tag alucard2396/laboratorio-final:latest .
        echo "Se construye la imagen de Docker"
        ls -R
      env:
        DOCKER_BUILDKIT: 1

    - name: Push Docker
      run: | 
        docker push alucard2396/laboratorio-final:latest
        echo "Se sube la imagen de Docker"

#---------------------------Docker Scan-----------------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:
    
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: |
        docker pull alucard2396/laboratorio-final:latest
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'alucard2396/laboratorio-final:latest'
        format: 'table'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: ls
      run: | 
        ls -R
    
    - name: Push Docker
      run: | 
        docker push alucard2396/laboratorio-final:latest
#------------------------Deploy APP---------------------------------------------------

  Deploy:
    needs: DockerScan
    runs-on: self-hosted
    steps:
      - name: Clonacion del Codigo
        uses: actions/checkout@v4

      - name: Despliegue
        run: |
          kubectl apply -f ./Kubernetes/deployment.yml


